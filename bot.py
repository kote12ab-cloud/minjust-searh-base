import csv
import re
import os
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
CSV_FILE = 'exportfsm.csv'
TOKEN = " "  # ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
RESULTS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∞–∑–∞: ID -> –æ–ø–∏—Å–∞–Ω–∏–µ
EXTREMIST_DATABASE = {}

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
LAST_BUTTON_PRESS = {}

# === –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2 ===
def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2
    """
    if not text:
        return ""
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

# === –û—á–∏—Å—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ CSV ===
def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫"""
    return re.sub(r'\s+', ' ', text.strip().strip('"'))

def parse_line_robust(line):
    """–†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º –∫–∞–≤—ã—á–µ–∫ –∏ –¥–∞—Ç"""
    line = line.strip()
    if not line:
        return []

    # –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ü–µ: 01.01.2024
    line = re.sub(r';?\s*\d{2}\.\d{2}\.\d{4}$', '', line)
    # –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ
    line = re.sub(r'^[!?¬ª‚Äú"¬ª\s]+', '', line)

    parts = []
    current = []
    in_quotes = False
    i = 0
    while i < len(line):
        c = line[i]
        if c == '"':
            in_quotes = not in_quotes
        if c == ';' and not in_quotes:
            parts.append(''.join(current))
            current = []
        else:
            current.append(c)
        i += 1
    if current:
        parts.append(''.join(current))

    items = []
    i = 0
    while i < len(parts):
        part = clean_text(parts[i])
        if part.isdigit():
            item_id = int(part)
            if i + 1 < len(parts):
                desc = clean_text(parts[i + 1])
                if desc and not desc.isdigit() and len(desc) > 5:
                    items.append((item_id, desc))
                    i += 2
                    continue
        i += 1
    return items

# === –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∏–∑ CSV ===
def load_database():
    if not os.path.exists(CSV_FILE):
        print(f"‚ùå –§–∞–π–ª {CSV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ: {os.getcwd()}")
        return False

    try:
        with open(CSV_FILE, 'r', encoding='cp1251') as f:
            content = f.read()
        print(f"‚úÖ –§–∞–π–ª {CSV_FILE} –ø—Ä–æ—á–∏—Ç–∞–Ω (–∫–æ–¥–∏—Ä–æ–≤–∫–∞ cp1251).")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    lines = content.splitlines()
    parsed_count = 0
    for line_num, line in enumerate(lines, 1):
        try:
            pairs = parse_line_robust(line)
            for item_id, desc in pairs:
                EXTREMIST_DATABASE[item_id] = desc
                parsed_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
            continue

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(EXTREMIST_DATABASE)} –∑–∞–ø–∏—Å–µ–π.")
    return True

# === –ü–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ —Ç–µ–∫—Å—Ç—É ===
def search(query: str):
    """–ò—â–µ—Ç –ø–æ ID –∏–ª–∏ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –ø–æ–¥—Å—Ç—Ä–æ–∫–∏"""
    if not query.strip():
        return []
    query_clean = query.strip().lower()
    results = []

    for item_id, desc in EXTREMIST_DATABASE.items():
        if query_clean.isdigit() and int(query_clean) == item_id:
            results.append((item_id, desc))
        elif query_clean in desc.lower():
            results.append((item_id, desc))

    return sorted(results, key=lambda x: x[0])

# === Telegram: /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = (
        "üõ°Ô∏è *–ù–µ –æ—Ñ–∏—Ü–∞–ª—å—ã–Ω–π  –±–æ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –†–§*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `3632`)\n"
        "‚Ä¢ –ò–ª–∏ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ö–Ω–∏–≥–∞`, `–ë—Ä–æ—à—É—Ä–∞`, `—Å—Ç–∞—Ç—å—è`, `–º—É–∑—ã–∫–∞`)\n\n"
        "‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —à–æ–∫–∏—Ä—É—é—â–∏–º. –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∞–≤–æ–≤–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è."
    )
    safe_text = escape_markdown_v2(welcome_text)
    await update.message.reply_text(
        text=safe_text,
        parse_mode='MarkdownV2'
    )

# === Telegram: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return

    results = search(query)
    if not results:
        escaped_query = escape_markdown_v2(query)
        await update.message.reply_text(
            text=f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{escaped_query}*",
            parse_mode='MarkdownV2'
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    context.user_data['results'] = results
    context.user_data['query'] = query
    context.user_data['current_page'] = 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await send_page(update, context)

# === Telegram: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ===
async def send_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    results = context.user_data.get('results', [])
    page = context.user_data.get('current_page', 0)
    total_pages = (len(results) + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE
    start_idx = page * RESULTS_PER_PAGE
    end_idx = start_idx + RESULTS_PER_PAGE
    page_results = results[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    escaped_query = escape_markdown_v2(context.user_data.get('query', ''))
    response = f"üîé –ù–∞–π–¥–µ–Ω–æ: *{len(results)}* –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É `{escaped_query}`\n"
    response += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ *{page + 1}/{total_pages}*\n\n"

    for item_id, desc in page_results:
        preview = desc[:200] + "..." if len(desc) > 200 else desc
        escaped_desc = escape_markdown_v2(preview)
        escaped_id = escape_markdown_v2(str(item_id))
        response += f"üìå *‚Ññ {escaped_id}*\n{escaped_desc}\n\n"

    # –ö–Ω–æ–ø–∫–∏
    keyboard = []
    row = []
    if page > 0:
        row.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"))
    if page < total_pages - 1:
        row.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next"))
    if row:
        keyboard.append(row)
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=response,
                reply_markup=reply_markup,
                parse_mode='MarkdownV2',
                disable_web_page_preview=True
            )
        else:
            await update.message.reply_text(
                text=response,
                reply_markup=reply_markup,
                parse_mode='MarkdownV2',
                disable_web_page_preview=True
            )
    except Exception as e:
        error_msg = str(e).lower()
        if "message is not modified" in error_msg:
            await update.callback_query.answer()
        elif "too many requests" in error_msg:
            await update.callback_query.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            # –†–µ–∑–µ—Ä–≤: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await update.callback_query.message.reply_text(
                    text="üì¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):",
                    parse_mode='MarkdownV2'
                )
                await update.callback_query.message.reply_text(
                    text=response,
                    reply_markup=reply_markup,
                    parse_mode='MarkdownV2',
                    disable_web_page_preview=True
                )
            except:
                pass

# === Telegram: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞) ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π '–ù–∞–∑–∞–¥' / '–î–∞–ª–µ–µ'"""
    query = update.callback_query
    user_id = query.from_user.id
    now = datetime.now()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    last_time = LAST_BUTTON_PRESS.get(user_id)
    if last_time and (now - last_time) < timedelta(milliseconds=800):
        await query.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=False)
        return

    LAST_BUTTON_PRESS[user_id] = now

    try:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–æ

    page = context.user_data.get('current_page', 0)
    results = context.user_data.get('results', [])
    total_pages = (len(results) + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE

    if query.data == "next" and page < total_pages - 1:
        context.user_data['current_page'] = page + 1
        await send_page(update, context)
    elif query.data == "prev" and page > 0:
        context.user_data['current_page'] = page - 1
        await send_page(update, context)
    else:
        try:
            await query.edit_message_text(
                text="‚ùå –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                parse_mode='MarkdownV2'
            )
        except:
            pass

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    print("üìÅ –†–∞–±–æ—Ç–∞–µ–º –≤ –ø–∞–ø–∫–µ:", os.getcwd())
    time.sleep(0.5)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
    if not load_database():
        print("üî¥ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if TOKEN == "YOUR_BOT_TOKEN_HERE" or "YOUR_BOT_TOKEN_HERE" in TOKEN:
        print("‚ùå –ó–∞–º–µ–Ω–∏—Ç–µ TOKEN –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    print("üöÄ –°–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–∞...")
    time.sleep(0.5)

    try:
        app = Application.builder().token(TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CallbackQueryHandler(button_handler))

        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤. –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        app.run_polling(drop_pending_updates=True)

    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()